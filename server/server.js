// Generated by CoffeeScript 2.5.1
(function() {
  var DEBUG_HACKS, bodyParser, entryFromArg, express, fs, getColonTime, getLetterTime, getTime, lastPlayed, loadPlaylist, main, play, playNext, playlist, queue, run, savePlaylist, sockets;

  express = require('express');

  bodyParser = require('body-parser');

  fs = require('fs');

  DEBUG_HACKS = false;

  sockets = {};

  playlist = {};

  queue = [];

  lastPlayed = null;

  loadPlaylist = function() {
    var id, loadedList, p;
    if (fs.existsSync("playlist.json")) {
      loadedList = JSON.parse(fs.readFileSync("playlist.json", 'utf8'));
      playlist = {};
      for (id in loadedList) {
        p = loadedList[id];
        if (typeof p === 'boolean') {
          p = {
            id: id,
            user: 'Anonymous',
            start: -1,
            end: -1
          };
        }
        playlist[id] = p;
      }
    }
  };

  savePlaylist = function() {
    return fs.writeFileSync("playlist.json", JSON.stringify(playlist, null, 2));
  };

  play = function(e) {
    var socket, socketId;
    for (socketId in sockets) {
      socket = sockets[socketId];
      socket.emit('play', {
        id: e.id,
        start: e.start,
        end: e.end
      });
    }
    lastPlayed = e;
  };

  playNext = function() {
    var e, i, index, j, k, l, len, unshuffled, v;
    if (queue.length < 1) {
      unshuffled = [];
      for (k in playlist) {
        v = playlist[k];
        unshuffled.push(v);
      }
      if (unshuffled.length > 0) {
        queue = [unshuffled.shift()];
        for (index = l = 0, len = unshuffled.length; l < len; index = ++l) {
          i = unshuffled[index];
          j = Math.floor(Math.random() * (index + 1));
          queue.push(queue[j]);
          queue[j] = i;
        }
      }
    }
    if (queue.length < 1) {
      console.log("Nothing to play!");
      return null;
    }
    e = queue.shift();
    console.log(e);
    play(e);
    return e;
  };

  // parses strings like 1h30m20s to seconds
  getLetterTime = function(timeString) {
    var i, l, ref, timePairs, timeValues, totalSeconds;
    totalSeconds = 0;
    timeValues = {
      's': 1,
      'm': 1 * 60,
      'h': 1 * 60 * 60,
      'd': 1 * 60 * 60 * 24,
      'w': 1 * 60 * 60 * 24 * 7
    };
    // expand to "1 h 30 m 20 s" and split
    timeString = timeString.replace(/([smhdw])/g, ' $1 ').trim();
    timePairs = timeString.split(' ');
    for (i = l = 0, ref = timePairs.length; l < ref; i = l += 2) {
      totalSeconds += parseInt(timePairs[i], 10) * timeValues[timePairs[i + 1] || 's'];
    }
    return totalSeconds;
  };

  // parses strings like 1:30:20 to seconds
  getColonTime = function(timeString) {
    var i, l, ref, timePairs, timeValues, totalSeconds;
    totalSeconds = 0;
    timeValues = [1, 1 * 60, 1 * 60 * 60, 1 * 60 * 60 * 24, 1 * 60 * 60 * 24 * 7];
    timePairs = timeString.split(':');
    for (i = l = 0, ref = timePairs.length; (0 <= ref ? l < ref : l > ref); i = 0 <= ref ? ++l : --l) {
      totalSeconds += parseInt(timePairs[i], 10) * timeValues[timePairs.length - i - 1];
    }
    return totalSeconds;
  };

  getTime = function(timeString) {
    if (timeString == null) {
      return 0;
    }
    if (timeString.match(/^(\d+[smhdw]?)+$/)) {
      return getLetterTime(timeString);
    }
    if (timeString.match(/^(\d+:?)+$/)) {
      return getColonTime(timeString);
    }
    return 0;
  };

  entryFromArg = function(arg) {
    var endTime, id, startTime, t, url, v;
    if (arg == null) {
      return null;
    }
    arg = String(arg);
    id = null;
    startTime = -1;
    endTime = -1;
    try {
      url = new URL(arg);
    } catch (error) {
      url = null;
      id = arg;
    }
    if ((id == null) && (url.hostname === 'youtu.be')) {
      id = url.pathname.replace(/^\//, "");
    }
    if ((id == null) && url.hostname.match(/youtube.com$/)) {
      v = url.searchParams.get('v');
      if (v != null) {
        id = v;
      }
    }
    if (url != null) {
      t = url.searchParams.get('t');
      if (t != null) {
        startTime = getTime(t);
      }
      t = url.searchParams.get('start');
      if (t != null) {
        startTime = getTime(t);
      }
      t = url.searchParams.get('end');
      if (t != null) {
        endTime = getTime(t);
      }
    }
    if (id == null) {
      return null;
    }
    return {
      id: id,
      start: startTime,
      end: endTime
    };
  };

  run = function(args, user) {
    var e, params, url;
    if (args.length < 1) {
      return "MTV: No command given.";
    }
    switch (args[0]) {
      case 'what':
      case 'whatisthis':
      case 'who':
      case 'whodis':
        if (lastPlayed === null) {
          return "MTV: I have no idea what's playing.";
        }
        url = `https://youtu.be/${lastPlayed.id}`;
        params = "";
        if (lastPlayed.start >= 0) {
          params += params.length === 0 ? "?" : "&";
          params += `start=${lastPlayed.start}`;
        }
        if (lastPlayed.end >= 0) {
          params += params.length === 0 ? "?" : "&";
          params += `end=${lastPlayed.end}`;
        }
        return `MTV: Currently playing one of ${lastPlayed.user}'s songs: ${url}${params}`;
      case 'play':
        e = entryFromArg(args[1]);
        if (e == null) {
          return "MTV: play: invalid argument";
        }
        play(e);
        return `MTV: Playing ${e.id}`;
      case 'add':
        e = entryFromArg(args[1]);
        if (e == null) {
          return "MTV: add: invalid argument";
        }
        if (playlist[e.id] != null) {
          return `MTV: Already in pool: ${e.id}`;
        }
        e.user = user;
        playlist[e.id] = e;
        savePlaylist();
        return `MTV: Added to pool: ${e.id}`;
      case 'queue':
      case 'q':
        e = entryFromArg(args[1]);
        if (e == null) {
          return "MTV: queue: invalid argument";
        }
        queue.unshift(e);
        if (playlist[e.id] != null) {
          return `MTV: Queued next (already in pool): ${e.id}`;
        } else {
          e.user = user;
          playlist[e.id] = e;
          savePlaylist();
          return `MTV: Queued next and added to pool: ${e.id}`;
        }
        break;
      case 'shuffle':
        queue = [];
        e = playNext();
        return `MTV: Shuffled and playing a fresh song: ${e.id}`;
      case 'remove':
      case 'delete':
      case 'del':
        e = entryFromArg(args[1]);
        if (e == null) {
          return "MTV: remove: invalid argument";
        }
        if (playlist[e.id] != null) {
          delete playlist[e.id];
          savePlaylist();
          return `MTV: Deleted ${e.id} from shuffled pool.`;
        } else {
          return `MTV: ${e.id} is already not in the shuffled pool.`;
        }
        break;
      case 'next':
      case 'skip':
        e = playNext();
        return `MTV: Playing ${e.id}`;
    }
    return `MTV: unknown command ${args[0]}`;
  };

  main = function() {
    var app, argv, http, io;
    argv = process.argv.slice(2);
    if (argv.length > 0) {
      console.log("Debug hacks enabled.");
      DEBUG_HACKS = true;
    }
    loadPlaylist();
    app = express();
    http = require('http').createServer(app);
    io = require('socket.io')(http);
    io.on('connection', function(socket) {
      sockets[socket.id] = socket;
      socket.on('ready', function(msg) {
        return playNext();
      });
      return socket.on('disconnect', function() {
        if (sockets[socket.id] != null) {
          return delete sockets[socket.id];
        }
      });
    });
    app.get('/', function(req, res) {
      var html;
      html = fs.readFileSync(`${__dirname}/../web/client.html`, "utf8");
      // html = html.replace(/!PLAYERID!/, pid)
      // html = html.replace(/!TABLEID!/, tid)
      return res.send(html);
    });
    app.use(bodyParser.json());
    app.post('/cmd', function(req, res) {
      var args, response, user;
      console.log(req.body);
      if ((req.body != null) && (req.body.cmd != null)) {
        args = req.body.cmd.split(/\s+/g);
        user = req.body.user;
        if (user == null) {
          user = 'Anonymous';
        }
        response = run(args, user);
        console.log(`CMD: ${response}`);
        res.send(response);
        return;
      }
      return res.send("MTV: wat");
    });
    app.use(express.static('web'));
    return http.listen(3003, function() {
      return console.log('listening on *:3003');
    });
  };

  module.exports = main;

}).call(this);
