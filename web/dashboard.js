(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
var CastPlayer, beginCast, init, renderEntries, showHistory, showList, showPlaylist, showQueue, socket;

socket = null;

renderEntries = function(entries, isMap) {
  var e, html, i, k, len, m, params, title, url, v;
  html = "";
  if (isMap) {
    console.log(entries);
    m = entries;
    entries = [];
    for (k in m) {
      v = m[k];
      entries.push(v);
    }
    // This is the "all" list, sort it
    entries.sort(function(a, b) {
      if (a.title < b.title) {
        return -1;
      }
      if (a.title > b.title) {
        return 1;
      }
      return 0;
    });
  }
  for (i = 0, len = entries.length; i < len; i++) {
    e = entries[i];
    title = e.title;
    if (title == null) {
      title = e.id;
    }
    params = "";
    if (e.start >= 0) {
      params += params.length === 0 ? "?" : "&";
      params += `start=${e.start}`;
    }
    if (e.end >= 0) {
      params += params.length === 0 ? "?" : "&";
      params += `end=${e.end}`;
    }
    url = `https://youtu.be/${e.id}${params}`;
    html += `<div> * <a target="_blank" href="${url}">${title}</a> <span class="user">(${e.user})</span></div>
`;
  }
  return document.getElementById("main").innerHTML = html;
};

showList = function(url, isMap = false) {
  var xhttp;
  document.getElementById('main').innerHTML = "";
  xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    var entries;
    if ((this.readyState === 4) && (this.status === 200)) {
      try {
        // Typical action to be performed when the document is ready:
        entries = JSON.parse(xhttp.responseText);
        return renderEntries(entries, isMap);
      } catch (error) {
        return document.getElementById("main").innerHTML = "Error!";
      }
    }
  };
  xhttp.open("GET", url, true);
  return xhttp.send();
};

showHistory = function() {
  return showList("/info/history");
};

showQueue = function() {
  return showList("/info/queue");
};

showPlaylist = function() {
  return showList("/info/playlist", true);
};

CastPlayer = class CastPlayer {
  constructor() {
    this.remotePlayer = null;
    this.remotePlayerController = null;
  }

  initializeCastPlayer() {
    var options;
    options = {
      autoJoinPolicy: chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED,
      receiverApplicationId: chrome.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID
    };
    cast.framework.CastContext.getInstance().setOptions(options);
    this.remotePlayer = new cast.framework.RemotePlayer();
    this.remotePlayerController = new cast.framework.RemotePlayerController(this.remotePlayer);
    return this.remotePlayerController.addEventListener(cast.framework.RemotePlayerEventType.IS_CONNECTED_CHANGED, this.switchPlayer.bind(this));
  }

  switchPlayer() {
    var sessionState;
    sessionState = cast.framework.CastContext.getInstance().getSessionState();
    if (sessionState !== cast.framework.SessionState.SESSION_STARTED) {
      console.log("Session ended!");
      return;
    }
    console.log("Session starting!");
    return socket.emit('castready', {
      id: socket.id
    });
  }

};

beginCast = function(pkt) {
  var castSession, mediaInfo, request, sessionState;
  console.log("CAST:", pkt);
  sessionState = cast.framework.CastContext.getInstance().getSessionState();
  if (sessionState !== cast.framework.SessionState.SESSION_STARTED) {
    console.log("No session; skipping beginCast");
    return;
  }
  console.log("Starting cast!");
  castSession = cast.framework.CastContext.getInstance().getCurrentSession();
  mediaInfo = new chrome.cast.media.MediaInfo(pkt.url, 'video/mp4');
  request = new chrome.cast.media.LoadRequest(mediaInfo);
  if (pkt.start > 0) {
    request.currentTime = pkt.start;
  }
  return castSession.loadMedia(request);
};

init = function() {
  window.showHistory = showHistory;
  window.showQueue = showQueue;
  window.showPlaylist = showPlaylist;
  showHistory();
  socket = io();
  socket.on('cast', function(pkt) {
    return beginCast(pkt);
  });
  window.__onGCastApiAvailable = function(isAvailable) {
    var castPlayer;
    console.log(`__onGCastApiAvailable fired: ${isAvailable}`);
    castPlayer = new CastPlayer();
    if (isAvailable) {
      return castPlayer.initializeCastPlayer();
    }
  };
  return console.log("initialized!");
};

window.onload = init;


},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvY2xpZW50L2Rhc2hib2FyZC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQSxJQUFBLFVBQUEsRUFBQSxTQUFBLEVBQUEsSUFBQSxFQUFBLGFBQUEsRUFBQSxXQUFBLEVBQUEsUUFBQSxFQUFBLFlBQUEsRUFBQSxTQUFBLEVBQUE7O0FBQUEsTUFBQSxHQUFTOztBQUVULGFBQUEsR0FBZ0IsUUFBQSxDQUFDLE9BQUQsRUFBVSxLQUFWLENBQUE7QUFDaEIsTUFBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLEdBQUEsRUFBQTtFQUFFLElBQUEsR0FBTztFQUVQLElBQUcsS0FBSDtJQUNFLE9BQU8sQ0FBQyxHQUFSLENBQVksT0FBWjtJQUNBLENBQUEsR0FBSTtJQUNKLE9BQUEsR0FBVTtJQUNWLEtBQUEsTUFBQTs7TUFDRSxPQUFPLENBQUMsSUFBUixDQUFhLENBQWI7SUFERixDQUhKOztJQU9JLE9BQU8sQ0FBQyxJQUFSLENBQWEsUUFBQSxDQUFDLENBQUQsRUFBSSxDQUFKLENBQUE7TUFDWCxJQUFHLENBQUMsQ0FBQyxLQUFGLEdBQVUsQ0FBQyxDQUFDLEtBQWY7QUFDRSxlQUFPLENBQUMsRUFEVjs7TUFFQSxJQUFHLENBQUMsQ0FBQyxLQUFGLEdBQVUsQ0FBQyxDQUFDLEtBQWY7QUFDRSxlQUFPLEVBRFQ7O0FBRUEsYUFBTztJQUxJLENBQWIsRUFSRjs7RUFlQSxLQUFBLHlDQUFBOztJQUNFLEtBQUEsR0FBUSxDQUFDLENBQUM7SUFDVixJQUFPLGFBQVA7TUFDRSxLQUFBLEdBQVEsQ0FBQyxDQUFDLEdBRFo7O0lBRUEsTUFBQSxHQUFTO0lBQ1QsSUFBRyxDQUFDLENBQUMsS0FBRixJQUFXLENBQWQ7TUFDRSxNQUFBLElBQWEsTUFBTSxDQUFDLE1BQVAs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TSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBdEIsQ0FBa0MsU0FBbEM7RUFDVixJQUFHLEdBQUcsQ0FBQyxLQUFKLEdBQVksQ0FBZjtJQUNFLE9BQU8sQ0FBQyxXQUFSLEdBQXNCLEdBQUcsQ0FBQyxNQUQ1Qjs7U0FFQSxXQUFXLENBQUMsU0FBWixDQUFzQixPQUF0QjtBQWRVOztBQWdCWixJQUFBLEdBQU8sUUFBQSxDQUFBLENBQUE7RUFDTCxNQUFNLENBQUMsV0FBUCxHQUFxQjtFQUNyQixNQUFNLENBQUMsU0FBUCxHQUFtQjtFQUNuQixNQUFNLENBQUMsWUFBUCxHQUFzQjtFQUV0QixXQUFBLENBQUE7RUFFQSxNQUFBLEdBQVMsRUFBQSxDQUFBO0VBQ1QsTUFBTSxDQUFDLEVBQVAsQ0FBVSxNQUFWLEVBQWtCLFFBQUEsQ0FBQyxHQUFELENBQUE7V0FDaEIsU0FBQSxDQUFVLEdBQVY7RUFEZ0IsQ0FBbEI7RUFHQSxNQUFNLENBQUMscUJBQVAsR0FBK0IsUUFBQSxDQUFDLFdBQUQsQ0FBQTtBQUNqQyxRQUFBO0lBQUksT0FBTyxDQUFDLEdBQVIsQ0FBWSxDQUFBLDZCQUFBLENBQUEsQ0FBZ0MsV0FBaEMsQ0FBQSxDQUFaO0lBQ0EsVUFBQSxHQUFhLElBQUksVUFBSixDQUFBO0lBQ2IsSUFBRyxXQUFIO2FBQ0UsVUFBVSxDQUFDLG9CQUFYLENBQUEsRUFERjs7RUFINkI7U0FNL0IsT0FBTyxDQUFDLEdBQVIsQ0FBWSxjQUFaO0FBakJLOztBQW1CUCxNQUFNLENBQUMsTUFBUCxHQUFnQiIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsInNvY2tldCA9IG51bGxcblxucmVuZGVyRW50cmllcyA9IChlbnRyaWVzLCBpc01hcCkgLT5cbiAgaHRtbCA9IFwiXCJcblxuICBpZiBpc01hcFxuICAgIGNvbnNvbGUubG9nIGVudHJpZXNcbiAgICBtID0gZW50cmllc1xuICAgIGVudHJpZXMgPSBbXVxuICAgIGZvciBrLCB2IG9mIG1cbiAgICAgIGVudHJpZXMucHVzaCB2XG5cbiAgICAjIFRoaXMgaXMgdGhlIFwiYWxsXCIgbGlzdCwgc29ydCBpdFxuICAgIGVudHJpZXMuc29ydCAoYSwgYikgLT5cbiAgICAgIGlmIGEudGl0bGUgPCBiLnRpdGxlXG4gICAgICAgIHJldHVybiAtMVxuICAgICAgaWYgYS50aXRsZSA+IGIudGl0bGVcbiAgICAgICAgcmV0dXJuIDFcbiAgICAgIHJldHVybiAwXG5cbiAgZm9yIGUgaW4gZW50cmllc1xuICAgIHRpdGxlID0gZS50aXRsZVxuICAgIGlmIG5vdCB0aXRsZT9cbiAgICAgIHRpdGxlID0gZS5pZFxuICAgIHBhcmFtcyA9IFwiXCJcbiAgICBpZiBlLnN0YXJ0ID49IDBcbiAgICAgIHBhcmFtcyArPSBpZiBwYXJhbXMubGVuZ3RoID09IDAgdGhlbiBcIj9cIiBlbHNlIFwiJlwiXG4gICAgICBwYXJhbXMgKz0gXCJzdGFydD0je2Uuc3RhcnR9XCJcbiAgICBpZiBlLmVuZCA+PSAwXG4gICAgICBwYXJhbXMgKz0gaWYgcGFyYW1zLmxlbmd0aCA9PSAwIHRoZW4gXCI/XCIgZWxzZSBcIiZcIlxuICAgICAgcGFyYW1zICs9IFwiZW5kPSN7ZS5lbmR9XCJcbiAgICB1cmwgPSBcImh0dHBzOi8veW91dHUuYmUvI3tlLmlkfSN7cGFyYW1zfVwiXG4gICAgaHRtbCArPSBcIlwiXCJcbiAgICAgIDxkaXY+ICogPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cIiN7dXJsfVwiPiN7dGl0bGV9PC9hPiA8c3BhbiBjbGFzcz1cInVzZXJcIj4oI3tlLnVzZXJ9KTwvc3Bhbj48L2Rpdj5cblxuICAgIFwiXCJcIlxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1haW5cIikuaW5uZXJIVE1MID0gaHRtbFxuXG5cbnNob3dMaXN0ID0gKHVybCwgaXNNYXAgPSBmYWxzZSkgLT5cbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21haW4nKS5pbm5lckhUTUwgPSBcIlwiXG4gIHhodHRwID0gbmV3IFhNTEh0dHBSZXF1ZXN0KClcbiAgeGh0dHAub25yZWFkeXN0YXRlY2hhbmdlID0gLT5cbiAgICAgIGlmIChAcmVhZHlTdGF0ZSA9PSA0KSBhbmQgKEBzdGF0dXMgPT0gMjAwKVxuICAgICAgICAgIyBUeXBpY2FsIGFjdGlvbiB0byBiZSBwZXJmb3JtZWQgd2hlbiB0aGUgZG9jdW1lbnQgaXMgcmVhZHk6XG4gICAgICAgICB0cnlcbiAgICAgICAgICAgZW50cmllcyA9IEpTT04ucGFyc2UoeGh0dHAucmVzcG9uc2VUZXh0KVxuICAgICAgICAgICByZW5kZXJFbnRyaWVzKGVudHJpZXMsIGlzTWFwKVxuICAgICAgICAgY2F0Y2hcbiAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtYWluXCIpLmlubmVySFRNTCA9IFwiRXJyb3IhXCJcbiAgeGh0dHAub3BlbihcIkdFVFwiLCB1cmwsIHRydWUpXG4gIHhodHRwLnNlbmQoKVxuXG5zaG93SGlzdG9yeSA9IC0+IHNob3dMaXN0KFwiL2luZm8vaGlzdG9yeVwiKVxuc2hvd1F1ZXVlID0gLT4gc2hvd0xpc3QoXCIvaW5mby9xdWV1ZVwiKVxuc2hvd1BsYXlsaXN0ID0gLT4gc2hvd0xpc3QoXCIvaW5mby9wbGF5bGlzdFwiLCB0cnVlKVxuXG5jbGFzcyBDYXN0UGxheWVyXG4gIGNvbnN0cnVjdG9yOiAtPlxuICAgIEByZW1vdGVQbGF5ZXIgPSBudWxsXG4gICAgQHJlbW90ZVBsYXllckNvbnRyb2xsZXIgPSBudWxsXG5cbiAgaW5pdGlhbGl6ZUNhc3RQbGF5ZXI6IC0+XG4gICAgb3B0aW9ucyA9XG4gICAgICBhdXRvSm9pblBvbGljeTogY2hyb21lLmNhc3QuQXV0b0pvaW5Qb2xpY3kuT1JJR0lOX1NDT1BFRFxuICAgICAgcmVjZWl2ZXJBcHBsaWNhdGlvbklkOiBjaHJvbWUuY2FzdC5tZWRpYS5ERUZBVUxUX01FRElBX1JFQ0VJVkVSX0FQUF9JRFxuICAgIGNhc3QuZnJhbWV3b3JrLkNhc3RDb250ZXh0LmdldEluc3RhbmNlKCkuc2V0T3B0aW9ucyhvcHRpb25zKVxuICAgIEByZW1vdGVQbGF5ZXIgPSBuZXcgY2FzdC5mcmFtZXdvcmsuUmVtb3RlUGxheWVyKClcbiAgICBAcmVtb3RlUGxheWVyQ29udHJvbGxlciA9IG5ldyBjYXN0LmZyYW1ld29yay5SZW1vdGVQbGF5ZXJDb250cm9sbGVyKEByZW1vdGVQbGF5ZXIpXG4gICAgQHJlbW90ZVBsYXllckNvbnRyb2xsZXIuYWRkRXZlbnRMaXN0ZW5lcihjYXN0LmZyYW1ld29yay5SZW1vdGVQbGF5ZXJFdmVudFR5cGUuSVNfQ09OTkVDVEVEX0NIQU5HRUQsIEBzd2l0Y2hQbGF5ZXIuYmluZCh0aGlzKSlcblxuICBzd2l0Y2hQbGF5ZXI6IC0+XG4gICAgc2Vzc2lvblN0YXRlID0gY2FzdC5mcmFtZXdvcmsuQ2FzdENvbnRleHQuZ2V0SW5zdGFuY2UoKS5nZXRTZXNzaW9uU3RhdGUoKVxuICAgIGlmIHNlc3Npb25TdGF0ZSAhPSBjYXN0LmZyYW1ld29yay5TZXNzaW9uU3RhdGUuU0VTU0lPTl9TVEFSVEVEXG4gICAgICBjb25zb2xlLmxvZyBcIlNlc3Npb24gZW5kZWQhXCJcbiAgICAgIHJldHVyblxuXG4gICAgY29uc29sZS5sb2cgXCJTZXNzaW9uIHN0YXJ0aW5nIVwiXG4gICAgc29ja2V0LmVtaXQgJ2Nhc3RyZWFkeScsIHsgaWQ6IHNvY2tldC5pZCB9XG5cbmJlZ2luQ2FzdCA9IChwa3QpIC0+XG4gIGNvbnNvbGUubG9nIFwiQ0FTVDpcIiwgcGt0XG5cbiAgc2Vzc2lvblN0YXRlID0gY2FzdC5mcmFtZXdvcmsuQ2FzdENvbnRleHQuZ2V0SW5zdGFuY2UoKS5nZXRTZXNzaW9uU3RhdGUoKVxuICBpZiBzZXNzaW9uU3RhdGUgIT0gY2FzdC5mcmFtZXdvcmsuU2Vzc2lvblN0YXRlLlNFU1NJT05fU1RBUlRFRFxuICAgIGNvbnNvbGUubG9nIFwiTm8gc2Vzc2lvbjsgc2tpcHBpbmcgYmVnaW5DYXN0XCJcbiAgICByZXR1cm5cblxuICBjb25zb2xlLmxvZyBcIlN0YXJ0aW5nIGNhc3QhXCJcbiAgY2FzdFNlc3Npb24gPSBjYXN0LmZyYW1ld29yay5DYXN0Q29udGV4dC5nZXRJbnN0YW5jZSgpLmdldEN1cnJlbnRTZXNzaW9uKClcbiAgbWVkaWFJbmZvID0gbmV3IGNocm9tZS5jYXN0Lm1lZGlhLk1lZGlhSW5mbyhwa3QudXJsLCAndmlkZW8vbXA0JylcbiAgcmVxdWVzdCA9IG5ldyBjaHJvbWUuY2FzdC5tZWRpYS5Mb2FkUmVxdWVzdChtZWRpYUluZm8pXG4gIGlmIHBrdC5zdGFydCA+IDBcbiAgICByZXF1ZXN0LmN1cnJlbnRUaW1lID0gcGt0LnN0YXJ0XG4gIGNhc3RTZXNzaW9uLmxvYWRNZWRpYShyZXF1ZXN0KVxuXG5pbml0ID0gLT5cbiAgd2luZG93LnNob3dIaXN0b3J5ID0gc2hvd0hpc3RvcnlcbiAgd2luZG93LnNob3dRdWV1ZSA9IHNob3dRdWV1ZVxuICB3aW5kb3cuc2hvd1BsYXlsaXN0ID0gc2hvd1BsYXlsaXN0XG5cbiAgc2hvd0hpc3RvcnkoKVxuXG4gIHNvY2tldCA9IGlvKClcbiAgc29ja2V0Lm9uICdjYXN0JywgKHBrdCkgLT5cbiAgICBiZWdpbkNhc3QocGt0KVxuXG4gIHdpbmRvdy5fX29uR0Nhc3RBcGlBdmFpbGFibGUgPSAoaXNBdmFpbGFibGUpIC0+XG4gICAgY29uc29sZS5sb2cgXCJfX29uR0Nhc3RBcGlBdmFpbGFibGUgZmlyZWQ6ICN7aXNBdmFpbGFibGV9XCJcbiAgICBjYXN0UGxheWVyID0gbmV3IENhc3RQbGF5ZXJcbiAgICBpZiBpc0F2YWlsYWJsZVxuICAgICAgY2FzdFBsYXllci5pbml0aWFsaXplQ2FzdFBsYXllcigpXG5cbiAgY29uc29sZS5sb2cgXCJpbml0aWFsaXplZCFcIlxuXG53aW5kb3cub25sb2FkID0gaW5pdFxuIl19
