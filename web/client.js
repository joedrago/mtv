(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
var context, doneWaiting, endedTimer, fatal, onPlayerReady, onPlayerStateChange, play, player, playerManager, playing, serverEpoch, socket, tick;

player = null;

socket = null;

playing = false;

serverEpoch = null;

endedTimer = null;

fatal = function(reason) {
  var d;
  d = document.getElementById('pleasewait');
  d.style.display = 'block';
  return d.innerHTML = reason;
};

doneWaiting = function() {
  var d;
  d = document.getElementById('pleasewait');
  return d.style.display = 'none';
};

// autoplay video
onPlayerReady = function(event) {
  return event.target.playVideo();
};

// when video ends
onPlayerStateChange = function(event) {
  var videoData;
  if (endedTimer != null) {
    clearTimeout(endedTimer);
    endedTimer = null;
  }
  videoData = player.getVideoData();
  if ((videoData != null) && (videoData.title != null)) {
    console.log(`Title: ${videoData.title}`);
    window.document.title = `${videoData.title} - [[MTV]]`;
  }
  if (event.data === 0) {
    console.log("ENDED");
    return endedTimer = setTimeout(function() {
      return playing = false;
    }, 2000);
  }
};

play = function(id, startSeconds = null, endSeconds = null) {
  var opts;
  console.log(`Playing: ${id}`);
  opts = {
    videoId: id
  };
  if ((startSeconds != null) && (startSeconds >= 0)) {
    opts.startSeconds = startSeconds;
  }
  if ((endSeconds != null) && (endSeconds >= 1)) {
    opts.endSeconds = endSeconds;
  }
  player.loadVideoById(opts);
  return playing = true;
};

tick = function() {
  if (!playing && (player != null)) {
    console.log("Ready");
    return socket.emit('ready', {});
  }
};

window.onYouTubePlayerAPIReady = function() {
  doneWaiting();
  console.log("onYouTubePlayerAPIReady");
  player = new YT.Player('player', {
    width: '100%',
    height: '100%',
    videoId: 'AB7ykOfAgIA', // MTV loading screen, this will be replaced almost immediately
    playerVars: {
      'autoplay': 1,
      'controls': 0
    },
    events: {
      onReady: onPlayerReady,
      onStateChange: onPlayerStateChange
    }
  });
  socket = io();
  socket.on('play', function(pkt) {
    console.log(pkt);
    return play(pkt.id, pkt.start, pkt.end);
  });
  socket.on('server', function(server) {
    if ((serverEpoch != null) && (serverEpoch !== server.epoch)) {
      console.log("Server epoch changed! The server must have rebooted. Requesting fresh video...");
      socket.emit('ready', {});
    }
    return serverEpoch = server.epoch;
  });
  return setInterval(tick, 5000);
};

context = cast.framework.CastReceiverContext.getInstance();

playerManager = context.getPlayerManager();

playerManager.setMessageInterceptor(cast.framework.messages.MessageType.LOAD, function() {
  return new Promise(function(resolve, reject) {
    var metadata;
    metadata = new cast.framework.messages.GenericMediaMetadata();
    metadata.title = "Yee Title";
    metadata.subtitle = "Yee Author";
    request.media.metadata = metadata;
    return resolve(request);
  });
});

context.start();

setTimeout(function() {
  return window.onYouTubePlayerAPIReady();
}, 5000);


},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
